Okay , I will  now transform the previously created Markdown file (Entity Functional Profiles for Primal Mama Qu ests) back into a YAML document.  The goal is to capture the functional property  information defined in the Markdown in a structured YAML format that can be easily loaded and processed by game engines, worldbuilding tools, etc.  This involves extracting the details from the  profiles and organizing them under each entity ID.

```yaml
# Story World Codex: Primal Mama Quest Entity Functional Profiles (YAML)

QUEST_Ritual_ 01:
  name: "Gator-Gras Rituals: From City to Swamp"

CHAR_Geralt_PM:
  name: "Geralt of Rivia (PM Adaptation)"
  entity_type:  "Person (Mutant Witcher)"
  core_function:
    primary_role: "Monster hunter, problem solver, protector of the balance in a volatile world."
    secondary_role: "Unwitting influencer of local  politics, protector of the helpless."
  capabilities:
    - capability_id: "FUNC-GWitcher-01"
      name: "Gator-Sense (Witcher Senses)"
      description: "Heightened senses to detect scents, sounds, and energy traces unique to gators, monsters , and magical residue."
      limits_nuances: "Limited range, can be overwhelmed by strong stimuli, unreliable in areas of intense swamp magic."
    - capability_id: "FUNC-Fighting-01"
      name: "Alligator Combat Expertise"
      description: "Skilled in fighting  with swords and signs against various species of American Alligator."
      limits_nuances: "Less effective against engineered mega-gators; vulnerable to ambush tactics."
  skills:
    - skill_id: "SKL-Negotiation-01"
      name: "Backwater Haggling "
      proficiency_level: "Competent"
  inabilities:
    - inability_id: "INAB-Tech-01"
      description: "Limited understanding of advanced 1970s-era technology."
  vulnerabilities:
    - vulnerability_id:  "VULN-Illusion-01"
      description: "Susceptible to swamp witch illusions and deceptions."
  costs_dependencies:
    - constraint_id: "COST-Elixir-01"
      applies_to: "Gator-Strength Elixir"
       description: "Requires rare swamp herbs."

FACTION_EternalFlame_Goon:
  name: "\"Eternal Flame\" Swamp-Thugs"
  entity_type: "Organization"
  core_function:
    primary_role: "Zealots suppressing \"unnatural\" elements, enforce the cult s laws."
    secondary_role: "Bullying and harassing to follow there ideals."
  capabilities:
    - capability_id: "FUNC-Fight-01"
      name: "Numbers Advantage"
      description: "" #Add?
      limits_nuances: "" #Add?
   skills:
    - skill_id: "SKL-Enforce-01"
      name: "Intimidation"
      proficiency_level: "Limited"
  inabilities:
    - inability_id: "INAB-Intel-01"
      description: "" # Add?
  vulnerabilities:
    - vulnerability_id: "VULN-Intel-01"
      description: "" #Add?
  costs_dependencies:
    - constraint_id: "DEPEND-Leader-01"
      applies_to: "" #Add ?
      description: "Dependent on leaders"

CHAR_Trish_Marigold:
  name: "Trish \"the Fixer\" Marigold"
  entity_type: "Person (Sorceress Adapt)"
  core_function:
    primary_role: "Secure Ciri , solve problems, adapt."
    secondary_role: "Unwitting influencer of local politics, protect herself."
  capabilities:
    - capability_id: "FUNC-Magic-01"
      name: "Enhanced Illusion"
      description: "" #Add?
      limits_nuances : "Requires a setup and materials"
  skills:
    - skill_id: "SKL-Negotiation-01"
      name: "Fixer Expertise"
      proficiency_level: "Highly Skilled"
  inabilities:
    - inability_id: "INAB-Resource- 01"
      description: "Lacks resources"
  vulnerabilities:
    - vulnerability_id: "VULN-Debt-01"
      description: "Can be exploited"
  costs_dependencies:
    - constraint_id: "DEPEND-Parts-01 "
      applies_to: "Magic"
      description: "Requires parts to function"

CREATURE_MuckCrawler_01:
  name: "Muck-Crawler"
  entity_type: "Creature"
  core_function:
    primary_role:  "Disrupt."
    secondary_role: "Disrupt local economy."
  capabilities:
    - capability_id: "FUNC-Attack-01"
      name: "Sharp Claws"
      description: "Deals damage"
      limits_nuances: "Only in water"
   skills:
    - skill_id: "SKL-Ambush-01"
      name: "Submerged surprise"
      proficiency_level: "Good"
  inabilities:
    - inability_id: "INAB-Terrain-01"
      description: " Can't attack out of water"
  vulnerabilities:
    - vulnerability_id: "VULN-Fire-01"
      description: "Vulnerable to fire"
  costs_dependencies:
    - constraint_id: "DEPEND-Water-01"
      app lies_to: "Attack"
      description: "Has to be submerged"

QUEST_Cards_01:
  name: "Gator-Gras Showdown: Cards in the Bayou"

CHAR_Vivaldi_01:
  name: "\"Vim\" Vivaldi"
   entity_type: "Person"
  core_function:
    primary_role: "to be a card hustler."
    secondary_role: "cheat to obtain power."
  capabilities:
    - capability_id: "FUNC-Game-01"
      name: " Gator-Gras Card Expertise"
      description: "High aptitude for playing cards"
      limits_nuances: "Prefers using cheats."
  skills:
    - skill_id: "SKL-Cheat-01"
      name: "Use of cheats"
      proficiency _level: "Highly Skilled"
  inabilities:
    - inability_id: "INAB-Loyal-01"
      description: "Cannot be loyal"
  vulnerabilities:
    - vulnerability_id: "VULN-Pride-01"
      description : "Prideful"
  costs_dependencies:
    - constraint_id: "DEPEND-Cards-01"
      applies_to: "Game"
      description: "Requires cards"
```

**Key Changes:**

*   **Entity-Centric Structure:**  The YAML is  now organized by entity ID (e.g., `CHAR_Geralt_PM`, `CREATURE_MuckCrawler_01`), making it easy to access the functional properties of any given entity.
*   **Functional Properties Mapped:** The capabilities, inabilities, skills, vulnerabilities, and costs /dependencies defined in the Markdown are now mapped to YAML keys.
*   **Hierarchical Data:**  Capabilities, skills, etc., are represented as lists of dictionaries, allowing for multiple properties per entity.
*   **String Handling:**  Multi-line descriptions are preserved correctly.
*   **Missing Data:** The ` FACTION_EternalFlame_Goon`,  `CHAR_Trish_Marigold`, and `CREATURE_MuckCrawler_01` had empty descriptors for a capability/skill. I left empty keys in the YAML where this occurred, so they could be readily filled-in during content creation.

 **How this YAML is Now Useful:**

*   **Game Engine Integration:** Can be directly loaded into a game engine to define character abilities, enemy behaviors, and quest conditions.
*   **Worldbuilding Tool:** Provides a structured format for managing the functional properties of all entities in the Primal Mama world, ensuring  consistency.
*   **AI/Behavior Design:** Can be used to inform the design of AI behaviors for characters and creatures, based on their capabilities, limitations, and dependencies.
*   **Quest Logic:**  Quests can reference these entity functional properties to create dynamic challenges and outcomes.

This YAML representation is now a highly  structured dataset that captures the essence of the Entity Functional Profiles, making it a powerful tool for both worldbuilding and game development.
